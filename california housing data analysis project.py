# -*- coding: utf-8 -*-
"""python Advance project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NbIOxbgoJSbYLVGsBHujwnPmqa-mJZK1

nominal,ordinal comes under numerical data,nominal means a noun like fruits,or colors there is no inhert order,in ordinal there is inhert order live education levels,customer rating

discrete ,continous comes under categorical data discrete means takes the integer value and can be counted ex:the number of cars in the parking lot ,continuous they have the fractional and decimal values works in the range example:height weight

1.. What is the average median income of the data set and check the distribution of data using appropriate plots. Please explain the distribution of the plot.
"""

#for Data visualization we use matplotlib library
import matplotlib.pyplot as plt
#for reading the dataset we use the pandas
import pandas as pd
#giving path of the dataset
housing = pd.read_excel("/content/housing+(1).xlsx")
#caluculating the mean of the median_income
average_median_income = housing["median_income"].mean()
#using the histogram doing some decoration for good better understanding
plt.hist(housing["median_income"], bins='auto', color='green', alpha=0.7)
#an axis line for pointing the mean in that histogram
plt.axvline(x=average_median_income, color='red',  label=f'Average: {average_median_income}')
#to draw the vertical line on the plot matplotlib has this function
#title on the top
plt.title('Median Income Distribution')
#label on the x_axis
plt.xlabel('Median_income')
#label on the y_axis
plt.ylabel('Frequency')
#for printing the a small box value
plt.legend()
#showing the plot that means hisogram
plt.show()

"""another way for representing the plot using the box plot we can use box plot for looking up for the mean,median,min,max values"""

#importing the matplotlib for datavisualization
import matplotlib.pyplot as plt
#importing pandas for reading the dataset
import pandas as pd
#giving the path of the dataset
housing = pd.read_excel("/content/housing+(1).xlsx")
#calulating the mean of the median_income
average_median_income = housing["median_income"].mean()
#to see that data was using the boxplot
plt.boxplot(housing["median_income"])
#title of the distribution
plt.title('Income Distribution - Boxplot')
#label on the x_axis
plt.xlabel('Income')
#label on y_axis
plt.ylabel("mean of the median_income")
#showing the visualization of the data
plt.show()

"""2.Draw an appropriate plot to see the distribution of housing_median_age and explain your observations"""

#for datavisualization we use matplotlib
import matplotlib.pyplot as plt
#for reading the dataset we use pandas
import pandas as pd
#giving path of the dataset
housing = pd.read_excel("/content/housing+(1).xlsx")
#histogram is used on the base of the question
plt.hist(housing["housing_median_age"], bins=20, color='green', edgecolor='black')
#for displaying the title on the top
plt.title('Distribution of Housing Median Age')
#label on the x_axis
plt.xlabel('Housing Median Age')
#label on the y_axis
plt.ylabel('Frequency')
#showing the plot
plt.show()
#the age of the houses are age 15,25,32-35

"""3.Show with the help of visualization, how median_income and median_house_values are related?


"""

#importing the matplotlib for datavisualization
import pandas as pd
#for redin the dataset we use pandas
housing = pd.read_excel("/content/housing+(1).xlsx")
#using the scatterplot for plotting the median income and median house values
plt.scatter(housing["median_income"], housing["median_house_value"],alpha=0.5, color='blue')
#title of the distribution
plt.title('Relationship between Median Income and Median House Values')
#label on the x_axis
plt.xlabel('Median Income')
#label on the y _axis
plt.ylabel('Median House Values')
#showing the datavisalization
plt.show()
#when median_income increases the median_house_values are also increasing

"""4. Create a data set by deleting the corresponding examples from the data set for which total_bedrooms are not available."""

#importing the pandas library for uploading the dataset
import pandas as pd
#pd.read_excel,resd_csv....are some of the functions that are there in the pandas is used for the reading the data set and uploading for the further operation
housing = pd.read_excel("/content/housing+(1).xlsx")
# dropna is used to delete the cells which are empty
new_data = housing.dropna(subset=['total_bedrooms'])
#creating a new data set foe the newly created data for that we use 'to_csv'
new_data.to_csv('new_dataset.csv', index = False)
#printing the newly created  dataset
print(pd.read_csv("/content/new_dataset.csv"))

"""5. Create a data set by filling the missing data with the mean value of the total_bedrooms in the original data set.


"""

#importing pandas for reading or uploading the dataset
import pandas as pd
#pd.read_excel,resd_csv....are some of the functions that are there in the pandas is used for the reading the data set and uploading for the further operation
housing = pd.read_excel("/content/housing+(1).xlsx")
#calculating the avgerage of the total_bedrooms we use"mean()"
mean_total_bedrooms = housing['total_bedrooms'].mean()
#filling the null values with the caluculated mean value of the total_bedrooms can be done by 'fillna'
housing['total_bedrooms'].fillna(mean_total_bedrooms, inplace=True)
#creating a new data set for the newly created data for that we use 'to_csv'
housing.to_csv('new_dataset_filled.csv', index = False)
#printing the newly created dataset
print(pd.read_csv("/content/new_dataset_filled.csv"))

"""6. Write a programming construct (create a user defined function) to calculate the median value of the data set wherever required.


"""

#To perform the numerical operation we use numpy library
#so here for calculating the median of the data we do import numpy
import numpy as np
#creating a function called as calculate_median and giving one parameter
def calculate_median(data):
#using the numpy and the function name called as median like'np.median' and giving the dataon which it need to perform the median operation
    median_value = np.median(data)
#returning the median_value
    return median_value
#here are the inputs that are given and on this given list1 it should perform
list1 = [5, 2, 8, 3, 7, 1, 9, 4, 6]
#calling the function
result = calculate_median(list1)
#printing the result
print(f"The median of the dataset is: {result}")

"""7. Plot latitude versus longitude and explain your observations.

latitude:lines runs towards east_west and measures north-south of the equater,Positive values represent locations in the Northern Hemisphere, while negative values indicate locations in the Southern Hemisphere.they ranges form -90 to +90

longitude:Longitude lines run north-south and measure the distance east or west of the Prime Meridian.it is located in greenwich meridian london,Positive values represent locations east of the Prime Meridian, while negative values indicate locations west of the Prime Meridian.ranges from -180 to +180
"""

#for data visulization we use matplotlib library
import matplotlib.pyplot as plt
#for reading the data set we use pandas library
import pandas as pd
#for reading the dataset giving the path of the data set is been given
housing = pd.read_excel("/content/housing+(1).xlsx")
#using sactterplot
plt.scatter(housing["latitude"],housing["longitude"], alpha = 0.5,color = 'pink')
# title
plt.title('Latitude versus Longitude')
#label on the x_axis
plt.xlabel('latitude')
#label on the y_axis
plt.ylabel('longitude')
#showing the visualization of the data
plt.show()

"""latitude:Most of California is situated in the Northern Hemisphere,Southern California, including cities like 'Los Angeles and San Diego,' lower latitude values (closer to 32 degrees north).
Northern California, including cities like 'San Francisco and Sacramento', will have higher latitude values (closer to 38-39 degrees north).

longitiude:California is on the western side of the United States,Western parts of California, like San Francisco, will have lower (more negative) longitude values.Eastern parts of California, like the Nevada border, will have higher (less negative) longitude values.

8.Create a data set for which the ocean_proximity is ‘Near ocean’.
"""

#importing the pandas library for reading the dataset
import pandas as pd
#reading of the dataset can be done by read_csv or read_excel or others and need to give the path of the dataset
housing = pd.read_excel("/content/housing+(1).xlsx")
#finding the houses which are near ocean
housing= housing[housing['ocean_proximity'] == 'NEAR OCEAN']
#only for them creating a data set using 'to_csv'
housing.to_csv('near_ocean_dataset.csv')
#printing the dataset
print(pd.read_csv("/content/near_ocean_dataset.csv"))

"""9.Find the mean and median of the median income for the data set created in question 8"""

#importing the pandas library for reading the dataset
import pandas as pd
#reading of the dataset can be done by read_csv or read_excel or others and need to give the path of the dataset
housing1 = pd.read_csv("/content/near_ocean_dataset.csv")
#based on the created near_ocean _dataset using the mean() we are calculating it on median income column
mean_of_median_income = housing1["median_income"].mean()
#calculating the median for the column median_income
median_of_median_income = housing1["median_income"].median()
#printing the outputs of mean and median of the median_income column
print(f'mean of the near_ocean dataset is : {mean_of_median_income}')
print(f'median of the near_ocean dataset is : {median_of_median_income}')

"""10. Please create a new column named total_bedroom_size. If the total bedrooms is 10 or less, it should be quoted as small. If the total bedrooms is 11 or more but less than 1000, it should be medium, otherwise it should be considered large.


"""

#importing pandas library  for reading the dataset
import pandas as pd
#reading of the dataset can be done by read_csv or read_excel or others and need to give the path of the dataset
housing = pd.read_excel("/content/housing+(1).xlsx")
#intializing the total_bedroom_size to empty
housing['total_bedroom_size'] = ''
#using the for loop concept
for index, row in housing.iterrows():
    total_bedrooms = row['total_bedrooms']
    if total_bedrooms <= 10:#for printing the smaller bedroom size
        housing.at[index, 'total_bedroom_size'] = 'small'
    elif 10 < total_bedrooms < 1000:# for medium
        housing.at[index, 'total_bedroom_size'] = 'medium'
    else:
        housing.at[index, 'total_bedroom_size'] = 'large'#for large size
print(housing[['total_bedrooms', 'total_bedroom_size']])# printing the output total_bedrooms and total_bedroom_size